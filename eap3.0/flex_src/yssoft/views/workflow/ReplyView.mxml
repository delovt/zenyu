<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:fx="http://ns.adobe.com/mxml/2009" 
		   xmlns:s="library://ns.adobe.com/flex/spark" paddingLeft="5" paddingRight="5"
		   xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%" xmlns:comps="yssoft.comps.*" 
		   label="协同回复{items.length==0?'':'('+items.length+')'}" xmlns:renders="yssoft.renders.*">
	<!--回复-->
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.rpc.events.ResultEvent;
			
			import yssoft.models.CRMmodel;
			import yssoft.models.ConstsModel;
			import yssoft.tools.AccessUtil;
			import yssoft.tools.CRMtool;
			import yssoft.vos.WfMessageVo;
			import yssoft.vos.WfNodeVo;
			[Bindable]
			private var items:ArrayCollection = new ArrayCollection();
			
			private var timegap:Number=10000; // 连续两次发送的时间间隔，单位毫秒
			private var curtime:Number=0;	   // 上一次的发送时间
			private var newTime:Number=0;	   //  最近一次的发送时间
			
			public var ioainvoice:int=0;			   // 协同的iid
			private var handleNodeIid:int;		// 当前操作节点的 iid
			private var handleNodePid:String;	// 当前操作节点的 ipnodeid 用来区分 是否为 发起人节点
			
			private var handleNode:WfNodeVo;
			private var optType:String;			// 协同的处理类型
			private var wfmessageVo:WfMessageVo=new WfMessageVo();
			
			public function checkParam():Boolean{
				if(wfmessageVo==null){
					return false;
				}
	/* 			if(CRMtool.isStringNull(this.cmessage.text)){
					CRMtool.tipAlert("请输入处理意见!",this.cmessage);
					return false;
				} */
				if(this.owner){
					/* if((this.owner as FreeCoView)){
						this.handleNode=(this.owner as FreeCoView).workflow.mainDraw.curHandlerNode;//..mainDraw.curHandlerNode;
						// 在组建初始化是，不容易获取 当前处理节点
						if(!this.handleNode){
							CRMtool.tipAlert("当前节点不存在！");
							return false;
						}
					}else{
						CRMtool.tipAlert("请打开协同绘制界面！");
						return false;
					} */
					this.handleNode=(this.owner as FreeCoView).handleNode;
					if(!this.handleNode){
						CRMtool.tipAlert("当前处理节点不存在！");
						return false;
					}
				}else{
					return false;
				}
				return true;
			}
			
			public function getParam():Object{
				wfmessageVo.bdiary=this.bdiary.selected?1:0;
				wfmessageVo.bhide=this.bhide.selected?1:0;
				wfmessageVo.iresult=0;// 0已阅、1同意、2不同意、3暂存待办、4退回
				wfmessageVo.cmessage=this.cmessage.text;
				wfmessageVo.iperson=CRMmodel.userId;
				wfmessageVo.ioainvoice=this.handleNode.ioainvoice;
				return wfmessageVo;
			}
			
		
			public function submit_clickHandler(event:MouseEvent):void{
				this.newTime=(new Date()).getTime();
				// 时间验证
 				if(this.curtime+this.timegap > this.newTime){
					CRMtool.tipAlert("发送信息过于频繁,请稍后在发送...");
					return;
				}else{
					this.curtime=this.newTime;
				} 
				
				if(!checkParam()){
					return;
				}
				var params:Object={};
					params.msgvo=this.getParam();
					ioainvoice=this.handleNode.ioainvoice;
					params.ioainvoice=this.handleNode.ioainvoice;
					params.inodeid=this.handleNode.inodeid;
					params.iperson=CRMmodel.userId;
					if(optType==ConstsModel.XTGL_OPT_DFSX || optType==ConstsModel.XTGL_OPT_GZSX || optType==ConstsModel.XTGL_OPT_YFSX){
						params.opt="startnode";
					}else{
						params.opt=this.handleNode.source;
					}
				AccessUtil.remoteCallJava("WorkFlowDest","wfHandleNode",callBack,params,"正在保存协同回复信息...");
			}
			public function callBack(event:ResultEvent):void{
				
				if(event.result){
					wfmessageVo.iid=event.result as int;
					wfmessageVo.dprocess=CRMtool.getFormatDateString();
					wfmessageVo.fdate=CRMtool.getFormatDateString("YY-MM-DD HH:NN");
					wfmessageVo.cname=CRMmodel.hrperson.cname;
					if(wfmessageVo.iresult==0){
						if(this.handleNode.inodemode == 0){
							wfmessageVo.resultname="已阅";
						}else{
							wfmessageVo.resultname="已审";
						}
						
						if(ioainvoice !=0 ){ // 处理成功后，刷新工作流
							getWorkFlowAndHandleNode(ioainvoice);
						}
					}else if(wfmessageVo.iresult==3){
						wfmessageVo.resultname="暂存待办";
					}else if(wfmessageVo.iresult==5){
						wfmessageVo.resultname="已审";
					}
					
					this.items.addItemAt(wfmessageVo,0);
					//CRMtool.tipAlert("信息发送成功!");
					
					// 处理 发送成功后的 界面显示
					cmessage.visible=false;
					hide.visible=false;
					cmessage.includeInLayout=false;
					//optbar.enabled=false;
					optbar.visible=false;
					optbar.includeInLayout=false;
					cmessage.text="";
				}else{
					CRMtool.tipAlert("处理失败,请重发!");
				}
				AccessUtil.remoteCallJava("As_optionsDest","getOptionsByCclass",judgeCloseHandler,{cclass:"public"},null,false);	
			}
			private function judgeCloseHandler(evt:ResultEvent):void{
				var basicSetResult:Object = evt.result;
				var basicSetArr:ArrayCollection = basicSetResult.mainOptions;
				var flag:Boolean = basicSetArr[0].cvalue==1?true:false;
				if(flag){
					CRMtool.removeChildFromViewStack();
				}
			}
			// 获取 消息列表
			public function getMessages(oaid:int,opt:String):void{
				ioainvoice=oaid;
				optType=opt;
				var param:Object={};
				param.ioainvoice=oaid;
				param.iperson=CRMmodel.userId;
				AccessUtil.remoteCallJava("WorkFlowDest","getMessages",getMsgCallBack,param,null,false);
			}
			// 获取 消息列表
			public function getMessagesHide(oaid:int,opt:String):void{
				ioainvoice=oaid;
				optType=opt;
				var param:Object={};
				param.ioainvoice=oaid;
				param.iperson=CRMmodel.userId;
				AccessUtil.remoteCallJava("WorkFlowDest","getMessagesHide",getMsgCallBack,param,null,false);
			}
			private function getMsgCallBack(event:ResultEvent):void{
				this.cmessage.setFocus();
				this.items=event.result as ArrayCollection;
			}
			
			/* protected function itemChangeHandler():void
			{
				if(!checkParam()){
					return;
				}
				var item:Object=pupmenu.selectedItem;
				if(item ==null){
					return;
				}
				if(item.type=="zcdb"){
					onzcdb();
				}
			} */
			// 暂存待办
			private function onzcdb():void{
				if(!checkParam()){
					return;
				}
				var param:Object=new Object()
				var msgvo:Object=this.getParam();
				msgvo.iresult=3;// 暂存待办
				param.msgvo=msgvo;
				param.inodeid=this.handleNode.inodeid;
				param.ioainvoice=this.handleNode.ioainvoice;
				param.iperson=CRMmodel.userId;
				AccessUtil.remoteCallJava("WorkFlowDest","zcdbHandler",callBack,param,"暂存待办处理中...");
			}
			
			// 刷新 工作流,处理成功后
			private function refreshWorkFlow():void{
				
			}
			public function getWorkFlowAndHandleNode(iid:int):void{
				if(this.owner is FreeCoView){
					if((this.owner as FreeCoView).workflow == null){
						return;
					}
				}else{
					return;
				}
				var param:Object={};
				param.optType=""; // 不是待发事项就行
				param.ioainvoice=iid;
				param.iperson=CRMmodel.userId;
				AccessUtil.remoteCallJava("WorkFlowDest","getCurNodeInfo",workFlowCallBack,param,"正在获取协同信息...");
			}
			private function workFlowCallBack(event:ResultEvent):void{
				if(event.result){
					var hn:WfNodeVo=event.result as WfNodeVo;
					if(this.owner is FreeCoView){
						if((this.owner as FreeCoView).workflow){
							(this.owner as FreeCoView).workflow.mainDraw.clearAllNodes();
							(this.owner as FreeCoView).workflow.mainDraw.workFlowEntrance(optType,ioainvoice,hn);
						}
					}
				}
			}
			
			//清除 
			public function clearInit():void{
					if(items){
						items.removeAll();
					}
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<mx:Canvas width="100%" height="100%" borderVisible="false" horizontalScrollPolicy="off">
		<mx:VBox width="100%" height="100%" borderVisible="false" verticalGap="0">
				<mx:Repeater id="rep" dataProvider="{items}" width="100%">
					<renders:ReplyViewRender width="100%" item="{rep.currentItem}"/>
					<comps:CrmDotLine width="100%" height="1" dotLineColor="0xcccccc"/>
				</mx:Repeater>
		</mx:VBox>
	</mx:Canvas>
	<mx:HBox id="hide"  paddingLeft="4" paddingRight="4" paddingTop="4" paddingBottom="4" cornerRadius="4" width="100%" borderStyle="solid" borderColor="#e1e1e1" borderAlpha="1">
		<s:TextArea id="cmessage" width="100%" height="37"  borderVisible="false" fontSize="12" visible="false" includeInLayout="false"/>
	</mx:HBox>
	<mx:HBox width="100%" height="32" verticalAlign="middle" id="optbar"  visible="false" includeInLayout="false" horizontalAlign="right">
		<s:CheckBox id="bhide" label="隐藏" visible="false"/>
		<s:CheckBox id="bdiary" label="日记" visible="false"/>
		<s:Button width="50" label="处理" click="submit_clickHandler(event)"/>
		<s:Button id="zcdb" width="45" label="暂存" click="onzcdb()"/>
		<!--<mx:PopUpButton id="pupbt" width="19" toolTip="点击，选择相关操作!">
			<mx:popUp>
				<mx:Menu id="pupmenu" itemClick="itemChangeHandler()">
					<mx:dataProvider>
						<fx:Array>
							<fx:Object label="暂存" type="zcdb"/>
							<fx:Object label="加签"/>
							<fx:Object label="转发"/>
							<fx:Object label="回退"/>
						</fx:Array>
					</mx:dataProvider>
				</mx:Menu>
			</mx:popUp>
		</mx:PopUpButton>-->
	</mx:HBox>
</mx:VBox>
