<?xml version="1.0" encoding="utf-8"?>
<mx:HBox xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark"
         xmlns:mx="library://ns.adobe.com/flex/mx"
         xmlns:comps="yssoft.comps.*" xmlns:basic="yssoft.comps.frame.module.Basic.*" xmlns:side="yssoft.frameui.side.*"
         width="100%" height="100%" implements="yssoft.impls.ICRMWindow"
         creationComplete="getRoleTree();getRightFuns();setToolButtonsEnabled(null)">
<fx:Script>
	<![CDATA[
    import mx.collections.ArrayCollection;
    import mx.controls.Menu;
    import mx.controls.dataGridClasses.DataGridColumn;
    import mx.controls.tabBarClasses.Tab;
    import mx.events.IndexChangedEvent;
    import mx.events.ItemClickEvent;
    import mx.events.ListEvent;
    import mx.events.MenuEvent;
    import mx.rpc.events.ResultEvent;

    import yssoft.comps.frame.FrameworkVBoxView;
    import yssoft.frameui.side.CorePanelPro;

    import yssoft.models.ConstsModel;
    import yssoft.tools.AccessUtil;
    import yssoft.tools.CRMtool;

    [Bindable]
    public var title1:String = "角色";
    [Bindable]
    public var title2:String = "用户";
    [Bindable]
    public var title3:String = "人员";
    [Bindable]
    public var arr_menuBar:ArrayCollection = new ArrayCollection(
            [{label: "修改", name: "onEdit"},
            {label: "保存", name: "onSave"},
            {label: "放弃", name: "onGiveUp"}]
    );
    [Bindable]
    private var roleUserArr:ArrayCollection = new ArrayCollection();
    [Bindable]
    private var roleRightArr:ArrayCollection = new ArrayCollection();

    private var allPanelList:ArrayCollection;

    [Bindable]
    public var menu:Menu = new Menu();

    [Bindable]
    private var menuData:ArrayCollection = new ArrayCollection([
        {label: "数据导出", name: "onExcelExport"}
    ]);

    /**
     *
     * 作者：liulei
     * 日期：2011-10-05
     * 功能：树初始化操作
     * 参数：无
     * 返回值：无
     * 修改人：
     * 修改时间：
     * 修改记录：
     *
     */
    public function getRoleTree():void {
        AccessUtil.remoteCallJava("RoleDest", "getRolesByIpid", callBackHandler);
        allPanelList = new ArrayCollection(panelContainer.getChildren());
    }

    /**
     *
     * 作者：liulei
     * 日期：2011-10-05
     * 功能：封装查询后的结果集
     * 参数：无
     * 返回值：无
     * 修改人：
     * 修改时间：
     * 修改记录：
     *
     */
    private function callBackHandler(event:ResultEvent):void {
        if (event.result != null) {
            var treexml:XML = new XML(event.result as String);
            this.treeMenu.treeCompsXml = treexml;
        }

        //add by zhong_jing 加入导出功能
        menu.dataProvider = this.menuData;
        menu.variableRowHeight = true;
        menu.addEventListener(MenuEvent.CHANGE, onClick);
        this.ppb.popUp = menu;
    }

    //加入导出功能
    private function onClick(event:MenuEvent):void {
        if (event.item.name == "onExcelExport") {
            //YJ Add
            /*
             YJ Add 列表数据导出至Excel
             前台传入参数说明：arr(数据集)，
             columnArr(列数据集，包括字段、字段标题)
             title(Excel标题)，
             flag(Excel是否显示序号,0--显示，1--不显示)

             */

            if (this.roleRightArr.length == 0) {
                CRMtool.tipAlert("请选择要导出的记录！！");
                return;
            }
            var objvalue:Object = {};
            var newroleRightArr:ArrayCollection = new ArrayCollection();
            for (var i:int = 0; i < roleRightArr.length; i++) {
                var roleRightObj:Object = roleRightArr.getItemAt(i);
                if (roleRightObj.buse == true) {
                    roleRightObj.buse = "是";
                }
                else if (roleRightObj.buse == false) {
                    roleRightObj.buse = "否";
                }
                newroleRightArr.addItem(roleRightObj);
            }
            objvalue.arr = newroleRightArr;//数据集
            objvalue.title = "操作权限";//标题
            objvalue.flag = 0;//是否显示序号
            var columnArr:ArrayCollection = new ArrayCollection();//记录字段名称和标题的记录集
            columnArr.addItem({"cfld": "buse", "cfldcaption": "是否有权限", "width": 200});
            columnArr.addItem({"cfld": "ccode", "cfldcaption": "权限编码", "width": 200});
            columnArr.addItem({"cfld": "ccaption", "cfldcaption": "权限标题", "width": 200});
            columnArr.addItem({"cfld": "cmemo", "cfldcaption": "备注", "width": 200});
            objvalue.fieldsList = columnArr;
            AccessUtil.remoteCallJava("ExcelHadleDest", "writeExcel", onWriteExcelBack, objvalue);//调用后台的导出方法
        }
    }

    //YJ Add 数据导出后的操作
    private function onWriteExcelBack(evt:ResultEvent):void {
        var filename:String = "";
        if (evt.result.hasOwnProperty("filename")) {
            filename = evt.result.filename as String;
        }
        var requestUrl:String = "/" + ConstsModel.publishAppName + "/excelExportServlet?fn=" + filename;
        var request:URLRequest = new URLRequest(requestUrl);
        navigateToURL(request, "_blank");
    }

    /**
     *
     * 作者：liulei
     * 日期：2011-10-05
     * 功能 获得角色人员列表
     * 参数：无
     * 返回值：无
     * 修改人：
     * 修改时间：
     * 修改记录：
     *
     */
    public function getRoleUser():void {
        AccessUtil.remoteCallJava("RoleDest", "getRoleuserVo", getRoleUsercallBackHandler, int(Number(this.treeMenu.selectedItem.@iid)), null, false);
    }

    private function getRoleUsercallBackHandler(event:ResultEvent):void {
        roleUserArr = event.result as ArrayCollection;
        this.title2 = "用户：" + roleUserArr.length;
    }

    protected function treeMenu_itemClickHandler():void {
        if (this.treeMenu.selectedItem) {
            this.title1 = "角色：" + this.treeMenu.selectedItem.@cname;
            getRoleUser();
            this.dgRight.isMultiColEnable = false;
        }
        treeFun_itemClickHandler(null);
    }

    /**
     *
     * 作者：liulei
     * 日期：2011-10-05
     * 功能 获得权限管理的注册表记录
     * 参数：无
     * 返回值：无
     * 修改人：
     * 修改时间：
     * 修改记录：
     *
     */
    protected function getRightFuns():void {
        AccessUtil.remoteCallJava("AuthcontentDest", "getTreeMenuList", onGetRightFunsBack, null, null, false);
        //初始化右表列
        //this.dgRight.InitColumns();
        var columns:Array = new Array();
        var col0:DataGridColumn = new DataGridColumn();
        col0.dataField = "ccode";
        col0.headerText = "权限编码";
        col0.width = 80;
        columns.push(col0);
        var col1:DataGridColumn = new DataGridColumn();
        col1.dataField = "ccaption";
        col1.headerText = "权限标题";
        col1.width = 200;
        columns.push(col1);
        var col2:DataGridColumn = new DataGridColumn();
        col2.dataField = "cmemo";
        col2.headerText = "备注";
        col2.width = 250;
        columns.push(col2);
        if (columns.length > 0) {
            this.dgRight.columns = this.dgRight.columns.concat(columns);
        }
    }

    private function onGetRightFunsBack(evt:ResultEvent):void {

        if (evt.result != null) {
            this.treeFun.treeCompsXml = new XML(evt.result as String);
        }
    }

    /**
     *
     * 作者：liulei
     * 日期：2011-10-05
     * 功能：按钮互斥
     * 参数：无
     * 返回值：无
     * 修改人：
     * 修改时间：
     * 修改记录：
     *
     */
    private function setToolButtonsEnabled(selectedName:String):void {
        CRMtool.toolButtonsEnabled(menuBar, selectedName, 1);
        var enabled:Boolean = (selectedName == "onSave" || selectedName == "onGiveUp" || selectedName == null);
        this.onCopy.enabled = !enabled;
    }

    protected function treeFun_itemClickHandler(event:ListEvent = null):void {
        var obj:Object = new Object();
        if (this.treeFun.selectedItem) {
            var ccode:String = this.treeFun.selectedItem.@ccode.toString();
            obj.ccode = ccode;
        }
        if (myTab.selectedIndex == 0) {
            if (this.treeMenu.selectedItem) {
                var iid:int = Number(this.treeMenu.selectedItem.@iid);
                obj.irole = iid;
            } else {
                obj.irole = 0;
            }
            AccessUtil.remoteCallJava("AuthcontentDest", "getLikeList", getFunCallBackHandler, obj, null, false);
        }
        if (myTab.selectedIndex == 1) {
            if (this.treeMenu2.selectedItem) {
                var iid:int = Number(this.treeMenu2.selectedItem.@iid);
                obj.iperson = iid;
            } else {
                obj.iperson = 0;
            }
            AccessUtil.remoteCallJava("AuthcontentDest", "getLikeListPerson", getFunCallBackHandler, obj, null, false);
        }

    }

    private function getFunCallBackHandler(evt:ResultEvent):void {
        roleRightArr = evt.result as ArrayCollection;
        var i:int = 1;
        for each (var item:Object in roleRightArr) {
            item.sort_id = i++;
            item.checked = Boolean(item.sel);
        }
        this.dgRight.isMultiColEnable = false;
        this.setToolButtonsEnabled(null);
    }

    protected function menuBar_itemClickHandler(event:ItemClickEvent):void {
        switch (event.item.name) {
            case "onEdit":
            {
                if (myTab.selectedIndex == 0) {
                    if (!this.treeMenu.selectedItem) {
                        CRMtool.showAlert("请选择角色！！");
                        return;
                    }
                }
                if (myTab.selectedIndex == 1) {
                    if (!this.treeMenu2.selectedItem) {
                        CRMtool.showAlert("请选择人员！！");
                        return;
                    }
                }

                if (!this.treeFun.selectedItem) {
                    CRMtool.showAlert("请选择功能模块！！");
                    return;
                }
                this.dgRight.isMultiColEnable = true;
                break;
            }
            case "onSave":
            {
                var obj:Object = new Object();
                if (myTab.selectedIndex == 0) {
                    obj.add = this.dgRight.getSelectRows();
                    obj.del = this.dgRight.getUnSelectRows();
                    var iid:int = Number(this.treeMenu.selectedItem.@iid);
                    obj.irole = iid;
                    AccessUtil.remoteCallJava("as_operauthViewDest", "addAllOperauth", getSaveCallBackHandler, obj, "正在保存请稍候……");
                }
                if (myTab.selectedIndex == 1) {
                    obj.add = this.dgRight.getSelectRows();
                    obj.del = this.dgRight.getUnSelectRows();
                    var iperson:int = Number(this.treeMenu2.selectedItem.@iid);
                    obj.iperson = iperson;
                    AccessUtil.remoteCallJava("as_operauthViewDest", "addAllOperauthForPerson", getSaveCallBackHandler, obj, "正在保存请稍候……");
                }
                break;
            }
            case "onGiveUp":
            {
                treeFun_itemClickHandler(null);
                this.dgRight.isMultiColEnable = false;
                break;
            }
        }
        this.setToolButtonsEnabled(event.item.name);
    }

    private function getSaveCallBackHandler(evt:ResultEvent):void {
        var succeedcount:int = evt.result as int;
        if (succeedcount > 0) {
            this.dgRight.isMultiColEnable = false;
        }
        else {
            treeFun_itemClickHandler(null);
            CRMtool.showAlert("保存失败！！");
        }
    }

    //窗体初始化
    public function onWindowInit():void {

    }

    //窗体打开
    public function onWindowOpen():void {
        getRoleTree();
        getRightFuns();
        setToolButtonsEnabled(null);
        this.roleUser.dataProvider = null;
        this.dgRight.dataProvider = null;

    }

    //窗体关闭,完成窗体的清理工作
    public function onWindowClose():void {

    }

    protected function myTab_changeHandler(event:IndexChangedEvent):void {
        if (myTab.selectedIndex == 1) {
            initClassViewLists();
        }
        treeFun_itemClickHandler(null);
    }

    private function panellistItemClickHandler(event:Event):void {
        (this.owner as FrameworkVBoxView).message.text = "";
        (this.owner as FrameworkVBoxView).myDesktop.styleName = "popupbuttonskin_query_gray";
        for each(var panelItem:CorePanelPro in allPanelList) {
            if (panelItem != event.target)
                panelItem.clearSelecte();
        }
    }

    public function initClassViewLists():void {
        AccessUtil.remoteCallJava("RoleDest", "getAllUsers", callBackHandler2);
    }

    private function callBackHandler2(event:ResultEvent):void {
        if (event.result != null) {
            var treexml:XML = new XML(event.result as String);
            this.treeMenu2.treeCompsXml = treexml;
        }
    }

    protected function treeMenu_itemClickHandler2():void {
        if (this.treeMenu2.selectedItem) {
            this.title3 = "人员：" + this.treeMenu2.selectedItem.@cname;
            //getRoleUser();//获取角色下的人员列表
            this.dgRight.isMultiColEnable = false;
        }
        treeFun_itemClickHandler(null);
    }

    ]]>
</fx:Script>
		
	<mx:HDividedBox width="100%" height="100%" styleName="contentHDividedBox" >
		<mx:VBox width="14%" height="100%" verticalGap="7">
            <mx:TabNavigator id="myTab" borderStyle="solid" tabWidth="90" tabHeight="32" height="100%" width="100%"
                             change="myTab_changeHandler(event)"
                             paddingTop="0" paddingRight="0">
                <mx:VBox id="panelContainer" paddingTop="-1" width="100%" borderStyle="none" height="100%"
                         horizontalScrollPolicy="off"
                         verticalScrollPolicy="off" label="角色">
			        <mx:VBox width="100%" height="100%" styleName="lefttree">
				        <mx:ApplicationControlBar width="100%" height="32" dock="true">
					        <mx:Label id="lblDataName" styleName="contentTitle" text="{this.title1}"/>
				        </mx:ApplicationControlBar>
				        <mx:HBox width="100%" height="100%" styleName="lefttree1">
				            <comps:TreeCompsVbox id="treeMenu" width="100%" height="100%"
								 change="setToolButtonsEnabled(null);"
								 borderVisible="false" itemClick="treeMenu_itemClickHandler()"/>
                        </mx:HBox>
			        </mx:VBox>

			        <mx:VBox width="100%" height="100%" styleName="lefttree">
                        <mx:ApplicationControlBar width="100%" height="32" dock="true">
                            <mx:Label text="{this.title2}" styleName="contentTitle"/>
                        </mx:ApplicationControlBar>
                        <mx:HBox width="100%" height="100%" styleName="lefttree1">
                            <mx:List id="roleUser" width="100%" height="100%"
                                         borderVisible="false" dataProvider="{this.roleUserArr}">
                            <mx:itemRenderer>
                                <fx:Component>
                                <mx:HBox>
                                    <mx:Label text="{data.cname}" />
                                    <mx:Label text="{'('+data.departmentName+')'}"/>
                                </mx:HBox>
                                </fx:Component>
                            </mx:itemRenderer>
                            </mx:List>
                        </mx:HBox>
                    </mx:VBox>
                </mx:VBox>

                <mx:VBox paddingTop="-1" paddingLeft="-1" paddingRight="0" width="100%" borderStyle="none" height="100%"
                         horizontalScrollPolicy="off" verticalScrollPolicy="off" label="人员">
                    <mx:VBox width="100%" height="100%" styleName="lefttree">
                        <mx:ApplicationControlBar width="100%" height="32" dock="true">
                            <mx:Label id="lblDataName2" styleName="contentTitle" text="{this.title3}"/>
                        </mx:ApplicationControlBar>
                        <mx:HBox width="100%" height="100%" styleName="lefttree1">
                            <comps:TreeCompsVbox id="treeMenu2" width="100%" height="100%"
                                                 change="setToolButtonsEnabled(null);"
                                                 borderVisible="false" itemClick="treeMenu_itemClickHandler2()"/>
                        </mx:HBox>
                    </mx:VBox>

                </mx:VBox>

            </mx:TabNavigator>
		</mx:VBox>
		
		<mx:VBox width="86%" height="100%" styleName="lefttree">
			<mx:ApplicationControlBar styleName="centertop" width="100%" height="32"  dock="true">
				<mx:ButtonBar id="menuBar" styleName="contentButtonBar" height="80%" dataProvider="{this.arr_menuBar}" itemClick="menuBar_itemClickHandler(event)"/>
				<mx:Button id="onCopy" width="48" height="25" label="复制" styleName="contentButtonBar" visible="false" includeInLayout="false"/>
				<mx:PopUpButton id="ppb" height="25" label="更多操作" openAlways="true"/>
			</mx:ApplicationControlBar>
			<mx:HDividedBox  width="100%" height="100%" styleName="contentHDividedBox" horizontalGap="0" paddingLeft="1"  paddingRight="1"  paddingBottom="1" >
				<mx:VBox width="23%" height="100%">
					<comps:TreeCompsVbox width="100%" height="100%" id="treeFun" dropShadowVisible="false"
					   itemClick="treeFun_itemClickHandler(event)">
					</comps:TreeCompsVbox>
				</mx:VBox>
				<mx:VRule height="100%" strokeColor="#e1e1e1"/>
				<mx:VBox width="77%" height="100%">
                    <basic:BasicMxDataGrid  id="dgRight" width="100%" height="100%" dataProvider="{roleRightArr}" isAllowMulti="true" isMultiColEnable="false"
                                            isSelectChangeCheck = "false" isMultiColFirst="false"/>
				</mx:VBox>
			</mx:HDividedBox>
		</mx:VBox>
	</mx:HDividedBox>
</mx:HBox>