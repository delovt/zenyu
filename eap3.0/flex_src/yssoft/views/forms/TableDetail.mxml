<?xml version="1.0" encoding="utf-8"?>
<s:Panel xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" title="单据表详细"
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="180" height="300" 
		 dragEnter="OnDragEnterHandler(event)"
		 dragDrop="onDragDropHandler(event)"
		 creationComplete="init()">
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.containers.Canvas;
			import mx.controls.Alert;
			import mx.controls.Tree;
			import mx.core.IUIComponent;
			import mx.events.DragEvent;
			import mx.managers.DragManager;
			import mx.rpc.events.ResultEvent;
			import mx.utils.ObjectUtil;
			
			import spark.layouts.supportClasses.DropLocation;
			import spark.skins.spark.PanelSkin;
			
			import yssoft.skins.TableDetailSkin;
			import yssoft.tools.AccessUtil;
			//本表1上游表 2 下游表0
			private var _formType:int=1;
			
			public function set formType(value:int):void
			{
				this._formType=value;
				if(_formType==1){
					this.title="[本表]"+this.tableCNName;
					enableListDrag(true);
				}else if(_formType==0){
					this.title="[下游表]"+this.tableCNName;
					enableDrag();
					enableListDrag(false);
				}else if(_formType==2){
					this.title="[上游表]"+this.tableCNName;
					enableDrag();
					enableListDrag(false)
				}
			}
			
			public function get formType():int
			{
				return this._formType;
			}
			
			// 表名称
			[Bindable]
			private var _tableName:String="";
			public function get tableName():String
			{
				return _tableName;
			}

			public function set tableName(value:String):void
			{
				_tableName = value;
				getFields();
			}

			// 表中文名称
			private var _tableCNName:String="单据表详细";

			public function get tableCNName():String
			{
				return _tableCNName;
			}

			public function set tableCNName(value:String):void
			{
				_tableCNName = value;
				if(_tableCNName){
					this.title=_tableCNName;
				}
			}

			// 对应的功能注册码
			[Bindable]
			private var _ifuniid:int=-1;
			
			public function set ifuniid(value:int):void
			{
				this._ifuniid=value;
				getFields();
			}
			public function get ifuniid():int
			{
				return this._ifuniid;
			}
			// 字段信息
			[Bindable]
			private var _fieldList:ArrayCollection=new ArrayCollection();
			
			public function get fieldList():ArrayCollection
			{
				return this._fieldList;
			}
			
			private function init():void
			{
				
				
			}
			//设置多动标题栏 可以拖动
			private function enableDrag():void
			{
				if(!(this.skin as PanelSkin).topGroup.hasEventListener(MouseEvent.MOUSE_DOWN)){
					(this.skin as PanelSkin).topGroup.addEventListener(MouseEvent.MOUSE_DOWN,onMouseDownHandler);
					(this.skin as PanelSkin).topGroup.addEventListener(MouseEvent.MOUSE_UP,onMouseUpHandler);
				}
			}
			
			//获取字段信息
			private function getFields():void
			{
				//Alert.show(""+this.ifuniid+","+this.tableName);
				if(_tableName=="" || _ifuniid == -1){
					return;
				}
				var param:Object={};
					param.ifuniid=this.ifuniid;
					param.ctname=this.tableName;
				AccessUtil.remoteCallJava("FormRelationDest","getTableFields",callBack,param,null,false);
			}
			private function callBack(event:ResultEvent):void{
				_fieldList=event.result as ArrayCollection;
			}
		
			protected function onMouseDownHandler(event:MouseEvent):void
			{
				// 检查对应的线条,有就删除
				var line:Canvas=this.parent.getChildByName(this.name+"_line") as Canvas;
		
				/* if(line){
					//this.parent.removeChild(line);
					line.visible=false;
				} */
				//改变层次
				this.parent.setChildIndex(this,this.parent.numChildren-1);
				this.startDrag();
			}
			
			protected function onMouseUpHandler(event:MouseEvent):void
			{
				this.stopDrag();
				// 拖动结束后，更新 对应线条的位置
				// 相关线条
				
				// 临时去掉
				//(this.owner as RelationDesign).drawFRLine(this,this._formType);
			}
			
			//添加 相关拖动事件
			private function addEvent():void
			{
				if(this.hasEventListener(DragEvent.DRAG_ENTER)){
					this.removeEventListener(DragEvent.DRAG_ENTER,OnDragEnterHandler);
					this.addEventListener(DragEvent.DRAG_ENTER,OnDragEnterHandler);
				}
				
				if(this.hasEventListener(DragEvent.DRAG_DROP)){
					this.removeEventListener(DragEvent.DRAG_DROP,onDragDropHandler);
					this.addEventListener(DragEvent.DRAG_DROP,onDragDropHandler);
				}
				
			}
			//接收拖动项
			protected function OnDragEnterHandler(event:DragEvent):void
			{
				//Alert.show("detail,"+event.dragSource.formats);
				if(this._formType==1 && !(event.dragInitiator is List)){//只有本表上可以拖动，即只有本表上可以添加上，下游表,屏蔽其他的 拖动源
					DragManager.acceptDragDrop(event.currentTarget as IUIComponent);
				}
			}
			//处理 拖动
			protected function onDragDropHandler(event:DragEvent):void
			{
				(this.owner as RelationDesign).showSetWindow();
			}
			
			// 处理 字段list 是否可以拖动等
			
			private function enableListDrag(bool:Boolean=true):void
			{
				if(bool){
					this.tfields.dragEnabled=true; // 作为拖动源
					return;
				}else{
					this.tfields.dropEnabled=true;  // 作为拖动的接受者
					//if(!tfields.hasEventListener(DragEvent.DRAG_DROP)){
						//tfields.addEventListener(DragEvent.DRAG_DROP,tfieldsDragDropHandler);
					//}
				}
				
			}
			
			protected function tfieldsDragDropHandler(event:DragEvent):void
			{
				// 阻止默认的操作
				event.preventDefault();
				
				
				var list:List=event.dragInitiator as List;
				if(list == null){
					return;
				}
				//Alert.show(""+ObjectUtil.toString(list.selectedItem));
				//清除 拖动指示
				tfields.layout.hideDropIndicator();
				//获取 拖动数据 即将 插入的索引
				var dl:DropLocation=tfields.layout.calculateDropLocation(event);
				//Alert.show(""+mx.utils.ObjectUtil.toString(event.dragSource.dataForFormat("itemsByIndex")));
				//Alert.show(""+dl.dropIndex);
				//var i:int=0
				//_fieldList.addItemAt({cfield:'zmm'},0);
				
				
				//_fieldList.getItemAt(dl.dropIndex).cfield +="_test";
				//_fieldList.refresh();
				//openConfigRelationWindow
			
				(this.owner as RelationDesign).openConfigRelationWindow(list.selectedItem.cfield,this._fieldList,dl.dropIndex);
			}
			
			
			private var _slideType:String="zd";
			
			public function set slideType(value:String):void
			{
/* 				if(value==this._slideType){
					return;
				} */
				this._slideType=value;
				startEffect(_slideType);
			}
			public function get slideType():String{
				return this._slideType;
			}
			
			//显示效果
			private function startEffect(type:String="zd"):void
			{
				if(type=="zd"){
					/* button.name="zk";
					button.label="展开"; */
					slideUp.stop();
					slideDown.stop();
					slideUp.play();
				}else{
					/* button.name="zd";
					button.label="折叠"; */
					slideUp.stop();
					slideDown.stop();
					slideDown.play();
				}
			}
			
			private function slideEffect(type:String):void{
				startEffect(type);
			}
			
			// 关闭，删除
			public function deleteItem():void
			{
/* 				if(this._formType==1){
					Alert.show("本表不允许删除","提示");
					return;
				} */
				//Alert.show(""+this.name);
				var line:DisplayObject=this.parent.getChildByName(this.name+"_line");
				if(line){
					this.parent.removeChild(line);
				}
				this.parent.removeChild(this);
				
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
		<s:Resize id="slideUp" heightTo="{(this.skin as PanelSkin).topGroup.height}" duration="1000" target="{this}"/>
		<s:Resize id="slideDown" heightTo="300" duration="1000" target="{this}"/>
	</fx:Declarations>
	<s:layout>
		<s:VerticalLayout gap="1"/>
	</s:layout>
	<!--<s:Button id="button" name="zd" label="折叠" click="slideEffect('zd')"/>
	<s:Button label="关闭" click="deleteItem()"/>-->
	<s:List id="tfields" width="100%" height="100%" dataProvider="{_fieldList}" labelField="cfield" 
			dragDrop="tfieldsDragDropHandler(event)">
	</s:List>
</s:Panel>
