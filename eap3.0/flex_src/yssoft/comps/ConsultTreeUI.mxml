<?xml version="1.0" encoding="utf-8"?>
<basic:BasicTitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:basic="yssoft.comps.frame.module.Basic.*"
                        xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:comps="yssoft.comps.*"
                        xmlns:s="library://ns.adobe.com/flex/spark"
                        width="{winwidth}" height="{winheight}" title="{acConsultsetVo.cname}"
                        isAllowMax="true"
                        creationComplete="getBodyData()">
    <fx:Script>
		<![CDATA[
        import mx.collections.ArrayCollection;
        import mx.managers.PopUpManager;
        import mx.rpc.events.ResultEvent;
        import mx.utils.StringUtil;

        import yssoft.models.*;
        import yssoft.tools.AccessUtil;
        import yssoft.tools.CRMtool;
        import yssoft.views.consultsets.ConsultsetSet;
        import yssoft.vos.*;

        //模糊查询值
        [Bindable]
        public var search:String;
        //参照窗体宽
        [Bindable]
        public var winwidth:int;
        //参照窗体高
        [Bindable]
        public var winheight:int;

        //参照编辑条件sql
        [Bindable]
        public var cconsultedit:String;

        //允许多选
        [Bindable]
        public var allowmulti:Boolean;

        //选中记录集属性
        public var selectRows:Object;

        //表体集
        [Bindable]
        public var bodyArr:ArrayCollection = new ArrayCollection();

        //参照主键
        public var iid:int;

        //表头VO
        [Bindable]
        public var acConsultsetVo:AcConsultsetVo = new AcConsultsetVo();
        //表体VO
        public var acConsultclmVo:AcConsultclmVo;

        //列表设置
        public var consultsetSet:ConsultsetSet = new ConsultsetSet();

        //查询树列表
        public var list:XMLList = new XMLList();

        private var myTreeXML:XML;

        //获得选中记录集回调方法
        [Bindable]
        public var getSelectTreeRows:Function;

        //只允许参照末节点
        private var _onlyGetEndNode:Boolean = true;
        public function get onlyGetEndNode():Boolean {
            return _onlyGetEndNode;
        }

        public function set onlyGetEndNode(value:Boolean):void {
            _onlyGetEndNode = value;
        }

        /**
         *
         * 作者：liu_lei
         * 日期：2011-08-27
         * 功能：获得选中数据退出
         * 参数：无
         * 返回值：无
         * 修改人：
         * 修改时间：
         * 修改记录：
         *
         */
        protected function btn_ok_clickHandler():void {
            if (this.getSelectTreeRows != null) {
                var xml:XML = this.tre_tree.selectedItem as XML;
                if (xml) {//避免空指针错误
                    if (xml.children().length() > 0 && this.onlyGetEndNode == true) {
                        CRMtool.showAlert(ConstsModel.CONSULT_WARNONLYGETEND);
                        return;
                    }
                    this.getSelectTreeRows(xml);
                }
            }
            PopUpManager.removePopUp(this);
        }

        /**
         *
         * 作者：liu_lei
         * 日期：2011-08-26
         * 功能：获得表体数据
         * 参数：无
         * 返回值：无
         * 修改人：
         * 修改时间：
         * 修改记录：
         *
         */
        public function getBodyData():void {
            AccessUtil.remoteCallJava("ConsultDest", "getAcConsultTreeData", bodyData_callBackHandler, {iid: iid, cconsultedit: cconsultedit});
        }

        /**
         *
         * 作者：liu_lei
         * 日期：2011-08-26
         * 功能：获得表体数据回调
         * 参数：无
         * 返回值：无
         * 修改人：
         * 修改时间：
         * 修改记录：
         *
         */
        public function bodyData_callBackHandler(event:ResultEvent):void {
            if (event.result.hasOwnProperty("exception") == false) {
                this.acConsultsetVo.cname = event.result.cname;
                var xmlString:String = event.result.treexml as String;
                if (CRMtool.isStringNotNull(xmlString)) {
                    this.tre_tree.treeCompsXml = new XML(xmlString);
                    myTreeXML = new XML(event.result.treexml as String);
                    list[0] = this.tre_tree.dataProvider[0];  //budProTr是tree的id,获取tree的dataProvider
                    if (this.search != "") {
                        this.tnp_search.text = this.search;
                        tnp_search_searchHandler();
                    }
                }
                else
                    this.tre_tree.treeCompsXml = null;
            }
            else {
                this.tre_tree.treeCompsXml = null;
            }
        }

        protected function btn_Expand_clickHandler(event:MouseEvent):void {
            this.tre_tree.expandAll();

        }

        protected function btn_Colapse_clickHandler(event:MouseEvent):void {
            this.tre_tree.CollapseAll();
        }

        /**
         *
         * 作者：liu_lei
         * 日期：2011-08-24
         * 功能：全表格搜索定位
         * 参数：无
         * 返回值：无
         * 修改人：
         * 修改时间：
         * 修改记录：
         *
         */
        protected function tnp_search_searchHandler():void {
            //lr modity
            tnp_search_changeHandler();

            //tre_tree.treeCompsXml = myTreeXML;
            //this.tre_tree.expandAll();
            //recursionFindTree(list,this.tnp_search.text);  //调用循环方法查找匹配的节点
        }

        //递归定位树形节点,要查找的字符就是传入的find  和对应tree的@guid属性
        private function recursionFindTree(xmlList:XMLList, find:String):void {
            for (var i:int = 0; i < xmlList.length(); i++) {
                var childXml:XML = xmlList[i];
                var guid1:String = childXml.@ccode;
                var guid2:String = childXml.@cname;
                if ((guid1 != null && guid1.indexOf(find) > -1) || (guid2 != null && guid2.indexOf(find) > -1)) {
                    this.tre_tree.selectedItem = childXml;    //将tree的选中项设定为当前项
                    return;
                } else if (this.tre_tree.dataDescriptor.isBranch(childXml))//如果有子节点,则递归调用本方法
                {
                    recursionFindTree(childXml.children(), find);
                }
            }
        }

        protected function tnp_search_keyDownHandler(event:KeyboardEvent):void {
            if (event.keyCode == 13) {
                tnp_search_searchHandler();
                tnp_search.selectAll();
            }
        }

        //lr add  搜索tree
        protected function tnp_search_changeHandler():void {
            searchTree(tnp_search.text);
        }


        public function searchTree(fname:String):void {
            var vname:String = StringUtil.trim(fname);
            if (vname == "") {
                tre_tree.treeCompsXml = myTreeXML;
            } else {
                var xml:XML = CRMtool.searchTreeNode(myTreeXML.descendants("*"), vname);
                if (xml)
                    tre_tree.treeCompsXml = xml;
            }

        }

        private function btn_All_clickHandler(event:MouseEvent):void {
            tnp_search.text = "";
            searchTree(tnp_search.text);
        }
        ]]>
	</fx:Script>
    <fx:Declarations>
        <!-- 将非可视元素（例如服务、值对象）放在此处 -->
    </fx:Declarations>
    <basic:layout>
        <s:VerticalLayout gap="-1"/>
    </basic:layout>
    <mx:VBox width="100%" height="100%" verticalGap="-1">
        <mx:ApplicationControlBar cornerRadius="0" styleName="consultTree" id="menuBar2" x="0" y="0" width="100%"
                                  height="32" dock="true">
            <mx:HBox width="100%">
                <comps:CrmTextInput id="tnp_search" text="" change="tnp_search_changeHandler()" width="280"
                                    search="tnp_search_searchHandler()" keyDown="tnp_search_keyDownHandler(event)">
                </comps:CrmTextInput>
                <mx:LinkButton id="btn_All" label="全部" click="btn_All_clickHandler(event)"
                               color="#388DB" fontWeight="normal" paddingLeft="5" paddingRight="0"
                               styleName="contentVBox" textDecoration="underline">
                </mx:LinkButton>
                <mx:LinkButton id="btn_Expand" label="展开" click="btn_Expand_clickHandler(event)"
                               color="#388DB" fontWeight="normal" paddingLeft="5" paddingRight="0"
                               styleName="contentVBox" textDecoration="underline">
                </mx:LinkButton>
                <mx:LinkButton id="btn_Colapse" label="折叠" click="btn_Colapse_clickHandler(event)"
                               color="#388DB" fontWeight="normal" paddingLeft="0" paddingRight="0"
                               styleName="contentVBox" textDecoration="underline">
                </mx:LinkButton>
                <mx:Spacer width="100%"/>
                <mx:LinkButton id="btn_ConsultEdit" label="档案编辑" color="#388DB" fontWeight="normal"
                               styleName="contentVBox" textDecoration="underline" visible="false">
                </mx:LinkButton>
            </mx:HBox>
        </mx:ApplicationControlBar>
        <comps:TreeCompsVbox id="tre_tree" paddingTop="-1" width="100%" height="100%"
                             itemDoubleClick="btn_ok_clickHandler()">
        </comps:TreeCompsVbox>
        <mx:HRule width="100%">
        </mx:HRule>
        <mx:HBox width="100%" height="38" horizontalAlign="right" verticalAlign="middle" paddingRight="10">
            <s:Button id="btn_ok" label="确定" click="btn_ok_clickHandler()"/>
            <s:Button id="btn_cancel" label="取消" click="PopUpManager.removePopUp(this)"/>
        </mx:HBox>
    </mx:VBox>
</basic:BasicTitleWindow>
