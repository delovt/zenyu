<?xml version="1.0" encoding="utf-8"?>
<!--  日期控件  sun dong ya -->
<mx:HBox xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
         xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:basic="yssoft.comps.frame.module.Basic.*" width="100%"
         height="28"
         creationComplete="init()" borderStyle="solid" enabled="{_editable}">
    <fx:Style>
        @namespace s "library://ns.adobe.com/flex/spark";
        @namespace mx "library://ns.adobe.com/flex/mx";

        .box_style {
            verticalAlign: middle;
            verticalGap: 0;
            horizontalGap: 0;
            paddingLeft: 0;
            paddingRight: 0;
            paddingBottom: 0;
            paddingTop: 0;
        }

    </fx:Style>
    <fx:Metadata>
        [Event(name="dateFocusIn", type="flash.events.Event")]
    </fx:Metadata>
    <fx:Script>
			<![CDATA[
        import mx.events.CalendarLayoutChangeEvent;
        import mx.events.FlexEvent;
        import mx.formatters.DateFormatter;

        import spark.components.NumericStepper;

        import yssoft.tools.CRMtool;

        [Bindable]
        private var _text:String = "";


        /**
         * 该属性包含日期时间文本值
         */
        public function set text(val:String):void {
            if (val == "") {
                try {
                    createOk();
                } catch (e:Error) { //如果清空失败则判断为未加载完成
                    this.addEventListener(Event.COMPLETE, createOk);
                }
            }
            this._text = val;
            try {
                init();
            } catch (e:Error) {
                return;
            }
        }

        //清空
        private function createOk():void {
            this.getDateObject().text = "";
            this.hours.value = 0;
            this.minutes.value = 0;
        }

        public function get text():String {


            if (null == getDateObject().text || "" == getDateObject().text) {
                return null
            }

            if (this._showShape == 0) {
                if (null == getDateObject()) {
                    this._text = null;
                }
                else {
                    this._text = getDateObject().text;
                }
            }
            else if (this._showShape == 1) {
                this._text = getDateObject().text + " " + this.getHourMinutes();
            }
            else if (this._showShape == 2) {
                this._text = this.getHourMinutes(false, true);
            }
            return _text;
        }

        private function init():void {
            if (null != _text) {

                if (_text.indexOf("-") != -1 && _text.indexOf(":") != -1) {
                    if (_text.indexOf(" ") != -1) {
                        var arr:Array = _text.split(" ");
                        this.getDateObject().text = arr[0].toString();

                        if (_showShape != 0) {
                            var timeArr:Array = arr[1].toString().split(":");
                            this.hours.value = int(timeArr[0]);
                            this.minutes.value = int(timeArr[1]);
                        }
                    } else {
                        CRMtool.tipAlert("日期格式不正确！");
                    }
                } else if (_text.indexOf("-") != -1) {
                    this.getDateObject().text = _text;
                } else if (_text.indexOf(":") != -1) {
                    var _timeArr:Array = _text.split(":");
                    this.hours.value = int(_timeArr[0]);
                    this.minutes.value = int(_timeArr[1]);
                }
            }
        }


        //是否启用日期编辑
        [Bindable]
        private var _editable:Boolean = true;
        /**
         *    是否允许日期手动输入(默认false)
         */
        public function set editable(value:Boolean):void {
            this._editable = value;
        }

        public function get editable():Boolean {
            return this._editable;
        }


        //是否启用样式
        private var _isStyle:Boolean = true;
        /**
         *    是否启用样式 (CRM contentTextInput style)
         */
        public function set isStyle(value:Boolean):void {
            this._isStyle = value;
        }

        public function get isStyle():Boolean {
            return this._isStyle;
        }

        //获取日期控件
        private function getDateObject():CRMDateField {
            var datefield:CRMDateField = date_box.getChildren()[0] as CRMDateField;
            if (_isStyle) {
                this.styleName = "contentTextInput";
            }
            if (datefield) {
                return datefield;
            } else {
                return new CRMDateField();
            }
        }


        [Bindable]
        private var _showShape:int = 1;
        /**
         *     标示显示的3个状态( 默认为1 )<br/>
         *  0 . 显示日期  （YYYY-MM-DD）<br/>
         *  1 . 显示日期到时分（ YYYY-MM-DD HH:NN）<br/>
         *  2 . 只显示 小时分钟 （HH:NN）<br/>
         */
        public function set showShape(val:int):void {
            this._showShape = val;
        }

        public function get  showShape():int {
            return this._showShape;
        }


        public var date:CRMDateField = null;
        //加载日期控件
        protected function creationCompleteHandler(event:FlexEvent):void {
            if (_showShape == 1 || _showShape == 0) {  //显示日期（天）
                this.date_box.percentWidth = 100;
                if (_showShape == 0) {
                    this.time_box.width = 0;
                }
            } else {
                this.date_box.width = 0;
                this.time_box.percentWidth = 100;         //显示时间
                this.width = 98;
            }
            date = new CRMDateField();
            date.percentWidth = 100;
            //date.percentHeight=100;
            date.editable = this.editable;
            date.percentHeight = 100;
            date.setStyle("borderVisible", "false");
            date.addEventListener(CalendarLayoutChangeEvent.CHANGE, dateChoose);
            date.addEventListener(FocusEvent.KEY_FOCUS_CHANGE, dateFocusOut);
            date.addEventListener(FocusEvent.MOUSE_FOCUS_CHANGE, dateFocusOut);
            date.addEventListener(FocusEvent.FOCUS_IN, function (e:FocusEvent):void {
                dispatchEvent(new Event("dateFocusIn"))
            });
            //date.addEventListener(FocusEvent.FOCUS_OUT,dateFocusOut);
            this.date_box.addChild(date);
        }


        //日期控件选中事件
        public function dateChoose(e:CalendarLayoutChangeEvent):void {
            if (e.triggerEvent.type == "mouseUp") {
                var format:DateFormatter = new DateFormatter();
                format.formatString = "YYYY-MM-DD";
                var dateStr:String = format.format(e.newDate.toString());
                this.getDateObject().text = dateStr;

                if (_showShape == 1) {
                    var hour_minutes:String = this.getHourMinutes(true);
                    var arr:Array = hour_minutes.split(":");
                    this.hours.value = Number(arr[0]);
                    this.minutes.value = Number(arr[1]);
                    this._text = dateStr + " " + hour_minutes;
                }
            }
        }


        //失去焦点后验证
        public function dateFocusOut(e:FocusEvent):void {
            var reg:RegExp = /^((((1[6-9]|[2-9]\d)\d{2})-(0?[13578]|1[02])-(0?[1-9]|[12]\d|3[01]))|(((1[6-9]|[2-9]\d)\d{2})-(0?[13456789]|1[012])-(0?[1-9]|[12]\d|30))|(((1[6-9]|[2-9]\d)\d{2})-0?2-(0?[1-9]|1\d|2[0-8]))|(((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))-0?2-29))$/;

            var dateObj:CRMDateField = this.getDateObject();
            var dateStr:String = dateObj.text;
            if (!( reg.test(dateStr) || dateStr == "")) {
                dateObj.errorString = "正确的日期格式为 YYYY-MM-DD ";
                CRMtool.tipAlert("日期格式错误！");
                dateObj.text = "";
            } else {
                dateObj.errorString = null;
            }
        }


        /**
         * 获取小时 分钟(HH:SS)<br/>
         * @param chooseFlag 标示是否选择日期时触发 (忽略text原有值，选择后以最新时间覆盖）
         * @param returnFlag   标示是否为状态 2 并返回text 值时
         */
        private function getHourMinutes(chooseFlag:Boolean = false, returnFlag:Boolean = false):String {
            var date:Date = new Date();
            var hour:Number = date.getHours();
            var minutes:Number = date.getMinutes();

            if (returnFlag) {
                hour = this.hours.value;
                minutes = this.minutes.value;
            }
            else {

                if (!chooseFlag)
                    if (this._text != "")   //若text 已有值，则为其内值 否则 显示当前日期
                    {
                        if (_showShape == 1) 		 // (模式1)
                        {
                            var arr_1:Array = new Array();

                            if (_text.indexOf(" ") != -1)  //若有  01:01 格式则不按照全日期截取
                            {
                                var arr_0:Array = this._text.split(" ");
                                arr_1 = arr_0[1].split(":");
                            }
                            else {
                                arr_1 = this._text.split(":");
                            }
                            hour = int(arr_1[0]);
                            minutes = int(arr_1[1]);
                        }
                        else if (_showShape == 2) //(模式2)
                        {
                            var arr_2:Array = new Array();

                            if (_text.indexOf(" ") != -1)  //若有 2000-01-01 01:01 格式则截取显示后5位
                            {
                                arr_2 = this._text.split(" ");
                            }

                            var arr_3:Array = this._text.split(":");

                            if (arr_2.length == 2) {
                                arr_3 = arr_2[1].split(":");
                            }

                            hour = int(arr_3[0]);
                            minutes = int(arr_3[1]);
                        }
                    }

            }

            var hourStr:String = "";
            var minutesStr:String = "";

            if (hour == this.hours.value) {
            } else {
                hour = this.hours.value;
            }
            if (minutes == this.minutes.value) {
            } else {
                minutes = this.minutes.value;
            }

            if (hour <= 9) {
                hourStr = "0" + hour;
            } else {
                hourStr += hour;
            }
            if (minutes <= 9) {
                minutesStr = "0" + minutes;
            } else {
                minutesStr += minutes;
            }


            return ( hourStr + ":" + minutesStr);
        }


        //初始化加载小时分钟
        private function hourMinutesComplete():void {
            if (_showShape == 2) {
                var arr:Array = this.getHourMinutes().split(":");
                this.hours.value = int(arr[0]);
                this.minutes.value = int(arr[1]);
            }
        }

        private function displayFmtFunc(value:Number):String {

            if (value + "" == "NaN")
                return "00";

            if (value <= 9) {
                return "0" + value;
            }
            return value + "";
        }

        /**
         * 获取焦点对象
         */
        public function getDateFocus():void {
            this.getDateObject().setFocus();
        }

        public function getHour():NumericStepper {
            return this.hours;
        }

        public function getMin():NumericStepper {
            return this.minutes;
        }
        ]]>
		</fx:Script>


    <mx:HBox width="100%" height="100%" id="vbox" styleName="box_style">

        <mx:HBox id="date_box" height="100%" creationComplete="creationCompleteHandler(event)" styleName="box_style"
                 verticalAlign="bottom"></mx:HBox>
        <mx:HBox id="time_box" styleName="box_style" height="100%">
            <basic:BasicNumericStepper id="hours" maximum="23" minimum="0" valueFormatFunction="displayFmtFunc"/>
            <basic:BasicNumericStepper id="minutes" maximum="59" minimum="0" valueFormatFunction="displayFmtFunc"/>

           <!-- <s:NumericStepper width="38" id="hours" maximum="23" minimum="0" valueFormatFunction="displayFmtFunc"
                              borderVisible="false" skinClass="yssoft.comps.window.skins.stepper.SkinForStepper"/>

            <s:NumericStepper width="38" id="minutes" maximum="59" minimum="0" valueFormatFunction="displayFmtFunc"
                              borderVisible="false" skinClass="yssoft.comps.window.skins.stepper.SkinForStepper"/>-->
        </mx:HBox>
    </mx:HBox>
</mx:HBox>

